* UNIS Implementation Notes
Below are a few temporary notes on the implementation of new features
for the unis runtime.

** PubSub
*** Install
Run the setup script in top level of the repository.
#+BEGIN_SRC
$ python setup.py build
$ python setup.py install
#+END_SRC

*** Run
You can attempt to run it as a daemon
#+BEGIN_SRC
$ periscoped
#+END_SRC

or to run it straight from the repository
#+BEGIN_SRC
$ python periscope/app.py
#+END_SRC

Either of which will start it running on port 8888.

*** Implementation
The pubsub mechanism in unis taps into a Redis server in order to
track channel based subscriptions from clients.  These subscriptions
run through a RESTful API and are independant of implementation details
on either the client or server.

*** API
The RESTful API for subscribing to messages from UNIS or the MS follows
the structure of the non-subscription based API calls.  Any resource with
a schema may be subscribed to by using the schema name as the =reference=,
specific resources can be subscribed to using a =reference= and an =id=.

| Action    | Noun             | Example                | Description                                     |
|-----------+------------------+------------------------+-------------------------------------------------|
| subscribe | /{resource}      | ws://localhost/port    | Subscribes to all resources of a given schema   |
| subscribe | /{resource}/{id} | ws://localhost/node/25 | Subscribes to a single resource with a given id |


*** Valid Schema

| Schema name     |
|-----------------|
| networkresource |
| node            |
| domain          |
| port            |
| link            |
| path            |
| network         |
| topology        |
| service         |
| blipp           |
| metadata        |
| data            |
| datum           |
| measurement     |
